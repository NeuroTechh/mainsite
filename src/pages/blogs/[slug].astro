---
import Layout from "../../layout/Layout.astro";
import client from "../../lib/sanity";
import { urlFor } from "../../lib/image";
import { formatDate } from "../../lib/date";
import ProgressBar from "../../components/progressbar";
import groq from "groq";
import MyForm from "../../components/form";
let { slug } = Astro.params;

const {
	authors,
	categories,
	body,
	mainImage,
	publishedAt,
	title,
	description,
	estimatedReadingTime,
} = await client.fetch(
	groq`*[_type == "post" && slug.current == $slug][0] {
  "authors": authors[]->{
    slug,name,image
  },
  "categories": categories[]->{
    title,
    slug
  },
  body,
  mainImage,
  publishedAt,
  description,
  title,
  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 )
}`,
	{
		slug,
	}
);

let next = await client.fetch(
	groq`*[_type == "post" && publishedAt > $publishedAt] | order(publishedAt asc) [0] {
  title,
    publishedAt,

  slug,
    "authors": authors[]->{
    slug,name,image
	},
}`,
	{
		publishedAt,
	}
);
let prev = await client.fetch(
	groq`*[_type == "post" && publishedAt < $publishedAt] | order(publishedAt desc) [0] {
  title,
    publishedAt,
  slug,
    "authors": authors[]->{
    slug,name,image
  },
}`,
	{
		publishedAt,
	}
);
if (!prev) {
	prev = "";
}
if (!next) {
	next = "";
}

import PortableText from "../../components/PortableText.astro";
---

<Layout
	title={title}
	description={description}
	imgurl={urlFor(mainImage).width(1200).height(600).quality(70).url()}
>
	<ProgressBar client:load />
	<div
		class="flex flex-col justify-center items-center md:min-h-[130vh] mt-[12vh] w-full max-w-7xl mx-auto gap-10 px-6 md:mt-24 md:mb-10"
	>
		<h1
			class="text-4xl md:text-6xl font-semibold 2xl:space-y-16 font-incognito text-center"
			id="titleee"
			data-value={title}
		>
			{title}
		</h1>
		{
			authors.map((author) => (
				<>
					<a
						href={`/author/${author.slug.current}`}
						class="text-white no-underline space-x-5 flex flex-row items-center "
					>
						<img
							src={urlFor(authors[0].image).url()}
							alt="avatar"
							class="relative inline-block h-[58px] w-[58px] !rounded-full object-cover object-center"
						/>
						<span class="text-md no-underline text-nowrap font-bold text-brand">
							{authors[0].name}
							<p class=" pt-1 font-light">
								Published on {formatDate(publishedAt)}
							</p>
							<p class=" pt-1">{estimatedReadingTime} min read</p>
						</span>
					</a>
				</>
			))
		}
		<div
			class="py-1 flex flex-col md:flex-row justify-center items-center gap-5"
			role="menu"
			aria-orientation="vertical"
			aria-labelledby="options-menu"
		>
			{
				categories.map((category) => (
					<a
						href={`/blogs?category=${category.slug.current}`}
						class="inline-block mr-3 rounded border border-brandred px-8 py-3 text-sm font-medium text-text transition hover:scale-[1.01] hover:shadow-xl focus:outline-none focus:ring w-fit text-center"
					>
						{category.title}
					</a>
				))
			}
		</div>
		<img
			src={urlFor(mainImage).url()}
			class="border-2 border-border rounded-2xl w-full h-full max-h-[300px] md:max-h-[500px] object-cover"
			data-value={urlFor(mainImage).url()}
			id="mainImage"
		/>
	</div>

	<article
		class="my-auto prose md:prose-lg prose-pink prose-invert prose-img:rounded-lg prose-img:p-1 prose-img:min-h-full md:prose-img:w-[60%] prose-img:mx-auto prose-figure:mx-auto prose-pre:text-left prose-headings:flex prose-headings:items-center prose-headings:gap-2 w-full flex flex-col justify-center mx-auto pt-[10vh] md:pt-0 pb-[5vh] px-6 md:px-0 prose-headings:font-incognito prose-headings:font-semibold prose-headings:text-center prose-headings:mx-auto prose-headings:text-brandred text-text prose-blockquote:text-text/50 prose-blockquote:border-brandred/60 no-underline prose-img:my-3 prose-headings:mt-10 prose-pre:border-2 prose-pre:border-border -mt-10 !break-words"
		data-aos="fade"
		data-aos-duration="300"
		data-aos-easing="ease-in-out"
		data-aos-once="true"
	>
		<PortableText portableText={body} />
		<hr class="borde-t border-t-white" />
	</article>

	<button
		class="flex flex-col relative md:flex-row justify-center items-center h-full w-full max-w-3xl mx-auto gap-10 px-6 mb-10"
		id="buttonnnn"
	>
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			class="lucide lucide-share-2"
			><circle cx="18" cy="5" r="3"></circle><circle cx="6" cy="12" r="3"
			></circle><circle cx="18" cy="19" r="3"></circle><line
				x1="8.59"
				x2="15.42"
				y1="13.51"
				y2="17.49"></line><line
				x1="15.41"
				x2="8.59"
				y1="6.51"
				y2="10.49"></line></svg
		>
	</button>
	<MyForm client:load />

	<div
		class={`grid justify-center ${
			next && prev ? "md:gap-8 md:grid-cols-2" : "grid-cols-1"
		} max-w-3xl mx-auto gap-10 px-6 mb-10 h-fit`}
	>
		{
			prev && (
				<a
					href={`/blogs/${prev.slug.current}`}
					class="border-2 border-text/20 w-full py-12 px-6 hover:bg-card/70 rounded-2xl flex flex-col transition-all duration-300 ease-in-out mt-6 gap-5"
				>
					<span class="flex items-center gap-2">
						{" "}
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							line-cap="round"
							line-join="round"
							class="lucide lucide-chevron-left text-text/50 rotate-180"
						>
							<path d="m9 18 6-6-6-6" />
						</svg>
						<p class="text-sm text-text/50">Previous Post</p>
					</span>
					<h1 class="text-2xl font-bold text-text text-turnicate">
						{prev.title}
					</h1>
				</a>
			)
		}
		{
			next && (
				<a
					href={`/blogs/${next.slug.current}`}
					class="border-2 border-text/20 w-full py-12 px-6 hover:bg-card/70 rounded-2xl flex flex-col transition-all duration-300 ease-in-out mt-6 gap-5"
				>
					<span class="flex items-center gap-2">
						<p class="text-sm text-text/50">Next Post</p>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="lucide lucide-chevron-right text-text/50"
						>
							<path d="m9 18 6-6-6-6" />
						</svg>
					</span>
					<h1 class="text-2xl font-bold text-text text-turnicate">
						{next.title}
					</h1>
				</a>
			)
		}
	</div>

	<script>
		const title = document
			.getElementById("titleee")
			.getAttribute("data-value");
		console.log("title", title);

		let shareData = {
			title: title,
			text: title,
			url: document.location.href,
		};

		const btn = document.getElementById("buttonnnn");
		const resultPara = document.querySelector(".result");

		btn.addEventListener("click", () => {
			if (navigator.share) {
				navigator
					.share(shareData)
					.then(
						() =>
							(resultPara.textContent = "MDN shared successfully")
					)
					.catch((e) => (resultPara.textContent = "Error: " + e));
			} else {
				navigator.clipboard
					.writeText(document.location.href)
					.then(
						() =>
							(resultPara.textContent =
								"Link copied to clipboard")
					)
					.catch((e) => (resultPara.textContent = "Error: " + e));
			}
		});
	</script>
</Layout>
